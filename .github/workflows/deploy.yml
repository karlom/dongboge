name: 博客快速部署

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      deploy_type:
        description: '部署类型'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto        # 自动检测
        - full        # 完整部署
        - blog_only   # 仅博客内容

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 安装依赖
        run: npm ci --prefer-offline --no-audit --silent

      - name: 构建项目
        env:
          PUBLIC_CDN_URL: https://cdn.dongboge.cn
          SITE_URL: https://dongboge.cn
          PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}
          NODE_ENV: production
        run: npm run build

      - name: 检测部署策略
        id: strategy
        run: |
          if [[ "${{ github.event.inputs.deploy_type }}" == "full" ]]; then
            echo "type=full" >> $GITHUB_OUTPUT
            echo "🔄 手动选择：完整部署"
          elif [[ "${{ github.event.inputs.deploy_type }}" == "blog_only" ]]; then
            echo "type=blog_only" >> $GITHUB_OUTPUT
            echo "📝 手动选择：仅博客部署"
          else
            # 自动检测变更
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
            echo "变更文件: $CHANGED_FILES"
            
            if echo "$CHANGED_FILES" | grep -E "^src/content/blog/" && ! echo "$CHANGED_FILES" | grep -v -E "^src/content/blog/|\.md$"; then
              echo "type=blog_only" >> $GITHUB_OUTPUT
              echo "📝 自动检测：仅博客内容变更"
            else
              echo "type=full" >> $GITHUB_OUTPUT
              echo "🔄 自动检测：代码变更，完整部署"
            fi
          fi

      - name: CDN增量更新
        run: |
          echo "☁️ 更新CDN资源..."
          export TENCENT_SECRET_ID=${{ secrets.TENCENT_SECRET_ID }}
          export TENCENT_SECRET_KEY=${{ secrets.TENCENT_SECRET_KEY }}
          export TENCENT_COS_BUCKET=${{ secrets.TENCENT_COS_BUCKET }}
          export TENCENT_COS_REGION=ap-guangzhou
          export CDN_DOMAIN=$(echo ${{ secrets.CDN_DOMAIN }} | sed 's|^https://||')
          
          node scripts/upload-to-cos.js

      # 仅博客部署 - 快速更新
      - name: 博客快速部署
        if: steps.strategy.outputs.type == 'blog_only'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.PORT || '22' }}
          script: |
            echo "📝 博客快速更新..."
            cd /var/www/dongboge
            
            # 只更新博客相关的静态文件
            rsync -av --delete /tmp/blog-update/ ./blog/ 2>/dev/null || echo "博客文件同步跳过"
            
            # 重启服务以更新内容
            if command -v pm2 >/dev/null 2>&1; then
              pm2 restart dongboge
              echo "✅ PM2服务已重启"
            else
              pkill -f "node.*server/entry.mjs" 2>/dev/null || true
              nohup node server/entry.mjs > logs/server.log 2>&1 &
              echo "✅ 服务已重启"
            fi
            
            echo "📝 博客更新完成！"

      - name: 上传博客文件
        if: steps.strategy.outputs.type == 'blog_only'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.PORT || '22' }}
          source: "dist/blog/"
          target: "/var/www/dongboge/"
          strip_components: 1

      # 完整部署 - 全量更新
      - name: 完整部署
        if: steps.strategy.outputs.type == 'full'
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avz --delete --exclude=logs --exclude=node_modules --exclude=.env
          path: dist/
          remote_path: /var/www/dongboge
          remote_host: ${{ secrets.HOST }}
          remote_user: ${{ secrets.USERNAME }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
          remote_key_pass: ${{ secrets.SSH_PASSPHRASE }}

      - name: 重启服务
        if: steps.strategy.outputs.type == 'full'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.PORT || '22' }}
          script: |
            echo "🚀 重启服务..."
            cd /var/www/dongboge
            
            # 设置环境变量（如果不存在）
            if [ ! -f ".env" ]; then
              cat > .env << EOF
            PUBLIC_SUPABASE_URL=${{ secrets.PUBLIC_SUPABASE_URL }}
            PUBLIC_SUPABASE_ANON_KEY=${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}
            PUBLIC_CDN_URL=https://cdn.dongboge.cn
            SITE_URL=https://dongboge.cn
            NODE_ENV=production
            HOST=127.0.0.1
            PORT=3000
            EOF
            fi
            
            # 重启服务
            if command -v pm2 >/dev/null 2>&1; then
              pm2 restart dongboge || pm2 start server/entry.mjs --name dongboge --log logs/server.log
              echo "✅ PM2服务已重启"
            else
              pkill -f "node.*server/entry.mjs" 2>/dev/null || true
              sleep 2
              nohup node server/entry.mjs > logs/server.log 2>&1 &
              echo "✅ 服务已重启"
            fi

      - name: 验证部署
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.PORT || '22' }}
          script: |
            echo "🧪 验证部署..."
            cd /var/www/dongboge
            
            # 等待服务启动
            sleep 5
            
            # 检查服务状态
            if ps aux | grep "node.*server/entry.mjs" | grep -v grep > /dev/null; then
              echo "✅ 服务运行正常"
              
              # 测试响应
              LOCAL_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:3000/ 2>/dev/null || echo "ERROR")
              SITE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://dongboge.cn/ 2>/dev/null || echo "ERROR")
              
              echo "本地响应: $LOCAL_RESPONSE"
              echo "网站响应: $SITE_RESPONSE"
              
              if [ "$LOCAL_RESPONSE" = "200" ] && [ "$SITE_RESPONSE" = "200" ]; then
                echo "🎉 部署成功！网站正常运行"
              else
                echo "⚠️ 响应异常，查看日志："
                tail -10 logs/server.log 2>/dev/null || echo "无日志"
              fi
            else
              echo "❌ 服务未运行，尝试修复..."
              ./fix-file-structure.sh $(hostname -I | awk '{print $1}') $USER ~/.ssh/id_rsa 2>/dev/null || echo "修复脚本不存在"
            fi
            
            echo "部署类型: ${{ steps.strategy.outputs.type }}"
            echo "完成时间: $(date)"