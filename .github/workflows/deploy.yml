name: 智能混合部署策略 - 解决rsync和404错误

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      deploy_type:
        description: '部署类型'
        required: true
        default: 'full'
        type: choice
        options:
        - full        # 完整部署
        - incremental # 增量部署
        - blog_only   # 仅博客内容

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 获取最近两次提交，用于比较变更

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 缓存依赖
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: 安装依赖
        run: |
          echo "📦 开始安装项目依赖..."
          npm ci --prefer-offline --no-audit --silent --no-fund
          echo "✅ 依赖安装完成"

      - name: 确保COS SDK依赖
        run: |
          echo "🔍 检查COS SDK依赖..."
          chmod +x scripts/ensure-dependencies.cjs
          node scripts/ensure-dependencies.cjs
          echo "✅ COS SDK检查完成"

      - name: 构建项目
        env:
          PUBLIC_CDN_URL: https://cdn.dongboge.cn
          SITE_URL: https://dongboge.cn
          PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}
          NODE_ENV: production
        run: |
          echo "🔨 开始构建项目..."
          echo "使用的CDN URL: $PUBLIC_CDN_URL"
          npm run build
          echo "✅ 项目构建完成"

      - name: 检查构建输出
        run: |
          echo "🔍 检查构建输出文件..."
          ls -la dist/
          echo "📁 检查服务端文件..."
          ls -la dist/server/ || echo "没有server目录"
          echo "📁 检查服务端pages文件..."
          find dist/server -name "*.mjs" | head -10 || echo "未找到.mjs文件"
          echo "📁 检查客户端文件..."
          ls -la dist/client/ || echo "没有client目录"

      - name: 确定部署策略
        id: deploy_strategy
        run: |
          echo "🤔 分析部署策略..."
          
          if [[ "${{ github.event.inputs.deploy_type }}" == "incremental" ]]; then
            echo "strategy=incremental" >> $GITHUB_OUTPUT
            echo "📝 手动选择：增量部署"
          elif [[ "${{ github.event.inputs.deploy_type }}" == "blog_only" ]]; then
            echo "strategy=blog_only" >> $GITHUB_OUTPUT
            echo "📝 手动选择：仅博客部署"
          elif [[ "${{ github.event.inputs.deploy_type }}" == "full" ]]; then
            echo "strategy=full" >> $GITHUB_OUTPUT
            echo "📝 手动选择：完整部署"
          else
            # 自动检测变更文件
            if git diff --name-only HEAD~1 HEAD > /dev/null 2>&1; then
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
              echo "📋 变更的文件："
              echo "$CHANGED_FILES"
              
              # 检查是否只有博客文件变更
              if echo "$CHANGED_FILES" | grep -E "^src/content/blog/" && ! echo "$CHANGED_FILES" | grep -v -E "^src/content/blog/|^README\.md$|\.md$"; then
                echo "strategy=blog_only" >> $GITHUB_OUTPUT
                echo "🎯 自动检测：仅博客内容变更，使用增量部署"
              else
                echo "strategy=full" >> $GITHUB_OUTPUT
                echo "🎯 自动检测：核心代码变更，使用完整部署"
              fi
            else
              echo "strategy=full" >> $GITHUB_OUTPUT
              echo "🎯 默认：使用完整部署"
            fi
          fi

      - name: 上传静态资源到腾讯云COS
        timeout-minutes: 15
        run: |
          echo "☁️ 上传静态资源到腾讯云COS..."
          export TENCENT_SECRET_ID=${{ secrets.TENCENT_SECRET_ID }}
          export TENCENT_SECRET_KEY=${{ secrets.TENCENT_SECRET_KEY }}
          export TENCENT_COS_BUCKET=${{ secrets.TENCENT_COS_BUCKET }}
          export TENCENT_COS_REGION=ap-guangzhou
          export CDN_DOMAIN=$(echo ${{ secrets.CDN_DOMAIN }} | sed 's|^https://||' | sed 's|^http://||')
          
          chmod +x scripts/incremental-upload.cjs
          node scripts/incremental-upload.cjs

      # ==================== 完整部署流程 ====================
      - name: 完整部署 - 创建部署包
        if: steps.deploy_strategy.outputs.strategy == 'full'
        run: |
          echo "📦 创建完整部署包..."
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          tar -czf deploy-${TIMESTAMP}.tar.gz -C dist .
          ls -la deploy-*.tar.gz
          echo "✅ 部署包创建完成"

      - name: 完整部署 - 服务器准备
        if: steps.deploy_strategy.outputs.strategy == 'full'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.PORT || '22' }}
          script: |
            set -e
            echo "🚀 开始服务器准备..."
            
            # 创建目录结构
            mkdir -p /var/www/dongboge/{server,client,logs,backup,node_modules} >/dev/null 2>&1
            sudo chown -R $USER:$USER /var/www/dongboge >/dev/null 2>&1
            chmod -R 755 /var/www/dongboge >/dev/null 2>&1
            echo "📁 目录结构已创建"
            
            # 备份现有部署
            cd /var/www
            if [ -d "dongboge/server" ] && [ -f "dongboge/server/entry.mjs" ]; then
              tar -czf dongboge/backup/backup-$(date +%Y%m%d-%H%M%S).tar.gz dongboge/server dongboge/client dongboge/package.json dongboge/.env >/dev/null 2>&1 || true
              cd dongboge/backup && ls -t backup-*.tar.gz | tail -n +6 | xargs rm -f >/dev/null 2>&1 || true
              echo "💾 已备份现有部署"
            fi
            
            # 停止现有服务
            if command -v pm2 >/dev/null 2>&1; then
              pm2 stop dongboge >/dev/null 2>&1 || true
              pm2 delete dongboge >/dev/null 2>&1 || true
            fi
            
            for pid in $(ps aux | grep 'node.*server/entry.mjs' | grep -v grep | awk '{print $2}' 2>/dev/null); do
              kill -15 $pid >/dev/null 2>&1 || true
              sleep 1
              kill -9 $pid >/dev/null 2>&1 || true
            done
            echo "🛑 已停止现有服务"
            
            echo "✅ 服务器准备完成"

      - name: 完整部署 - 上传部署包
        if: steps.deploy_strategy.outputs.strategy == 'full'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.PORT || '22' }}
          source: "deploy-*.tar.gz"
          target: "/tmp/"

      - name: 完整部署 - 解压和启动
        if: steps.deploy_strategy.outputs.strategy == 'full'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.PORT || '22' }}
          command_timeout: 10m
          script: |
            set -e
            echo "📦 开始部署..."
            cd /var/www/dongboge
            
            # 解压部署包
            tar -xzf /tmp/deploy-*.tar.gz >/dev/null 2>&1
            rm /tmp/deploy-*.tar.gz
            echo "📂 部署包已解压"
            
            # 验证关键文件
            REQUIRED_FILES=("server/entry.mjs" "package.json")
            for file in "${REQUIRED_FILES[@]}"; do
              if [ ! -f "$file" ]; then
                echo "❌ 关键文件缺失: $file"
                exit 1
              fi
            done
            echo "🔍 文件验证通过 ($(find server -name '*.mjs' | wc -l) 个.mjs文件)"
            
            # 安装依赖和设置环境
            npm install --production --silent >/dev/null 2>&1
            cat > .env << EOF
            PUBLIC_SUPABASE_URL=${{ secrets.PUBLIC_SUPABASE_URL }}
            PUBLIC_SUPABASE_ANON_KEY=${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}
            PUBLIC_CDN_URL=https://cdn.dongboge.cn
            SITE_URL=https://dongboge.cn
            NODE_ENV=production
            HOST=127.0.0.1
            PORT=3000
            EOF
            echo "📦 依赖安装完成，环境变量已设置"
            
            # 启动服务
            mkdir -p logs
            if ! command -v pm2 >/dev/null 2>&1; then
              npm install -g pm2 >/dev/null 2>&1
            fi
            
            pm2 start server/entry.mjs --name dongboge --log logs/server.log --error logs/error.log --out logs/out.log >/dev/null 2>&1
            pm2 save >/dev/null 2>&1
            sleep 5
            
            # 检查服务状态
            if ps aux | grep "node.*server/entry.mjs" | grep -v grep >/dev/null; then
              if netstat -tlnp | grep :3000 >/dev/null; then
                echo "✅ 服务启动成功，端口3000正在监听"
              else
                echo "⚠️ 服务已启动但端口未监听"
              fi
            else
              echo "⚠️ PM2启动失败，尝试直接启动..."
              nohup node server/entry.mjs > logs/server.log 2>&1 &
              sleep 3
              if ps aux | grep "node.*server/entry.mjs" | grep -v grep >/dev/null; then
                echo "✅ 直接启动成功"
              else
                echo "❌ 服务启动失败"
                tail -10 logs/server.log 2>/dev/null || echo "无法读取日志"
                exit 1
              fi
            fi
            
            echo "✅ 完整部署成功！"

      # ==================== 增量部署流程 ====================
      - name: 增量部署 - rsync传输
        if: steps.deploy_strategy.outputs.strategy == 'incremental' || steps.deploy_strategy.outputs.strategy == 'blog_only'
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avz --checksum --delete --rsync-path="mkdir -p /var/www/dongboge/client && rsync"
          path: dist/
          remote_path: /var/www/dongboge/client
          remote_host: ${{ secrets.HOST }}
          remote_user: ${{ secrets.USERNAME }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
          remote_key_pass: ${{ secrets.SSH_PASSPHRASE }}

      - name: 增量部署 - 重启服务
        if: steps.deploy_strategy.outputs.strategy == 'incremental' || steps.deploy_strategy.outputs.strategy == 'blog_only'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.PORT || '22' }}
          script: |
            echo "🔄 重启服务..."
            cd /var/www/dongboge
            
            # 安装依赖
            npm install --production --silent >/dev/null 2>&1
            echo "📦 依赖更新完成"
            
            # 重启服务
            if command -v pm2 >/dev/null 2>&1; then
              pm2 restart dongboge >/dev/null 2>&1 || pm2 start server/entry.mjs --name dongboge --log logs/server.log >/dev/null 2>&1
            else
              pkill -f "node.*server/entry.mjs" >/dev/null 2>&1 || true
              nohup node server/entry.mjs > logs/server.log 2>&1 &
            fi
            
            sleep 3
            if ps aux | grep "node.*server/entry.mjs" | grep -v grep >/dev/null; then
              echo "✅ 服务重启成功"
            else
              echo "❌ 服务重启失败"
              exit 1
            fi

      # ==================== 部署验证 ====================
      - name: 验证部署结果
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.PORT || '22' }}
          script: |
            echo "🧪 验证部署结果..."
            cd /var/www/dongboge
            
            # 文件验证
            MJS_COUNT=$(find server -name '*.mjs' 2>/dev/null | wc -l)
            echo "📁 服务端文件: $MJS_COUNT 个.mjs文件"
            
            # 进程验证
            if ps aux | grep "node.*server/entry.mjs" | grep -v grep >/dev/null; then
              echo "✅ Node.js进程运行正常"
            else
              echo "❌ Node.js进程未运行"
            fi
            
            # 端口验证
            if netstat -tlnp | grep :3000 >/dev/null; then
              echo "✅ 端口3000正在监听"
            else
              echo "❌ 端口3000未监听"
            fi
            
            # 服务响应验证
            sleep 2
            LOCAL_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:3000/ 2>/dev/null || echo "ERROR")
            EXTERNAL_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://dongboge.cn/ 2>/dev/null || echo "ERROR")
            
            echo "🌐 本地响应: $LOCAL_RESPONSE | 外部响应: $EXTERNAL_RESPONSE"
            
            if [ "$LOCAL_RESPONSE" = "200" ] && [ "$EXTERNAL_RESPONSE" = "200" ]; then
              echo "🎉 部署验证成功！"
              echo "📊 部署策略: ${{ steps.deploy_strategy.outputs.strategy }} | 时间: $(date '+%H:%M:%S')"
            else
              echo "⚠️ 部署可能存在问题"
              if [ -f "logs/server.log" ]; then
                echo "最近日志:"
                tail -5 logs/server.log 2>/dev/null || echo "无法读取日志"
              fi
            fi
