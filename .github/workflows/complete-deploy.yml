name: 完整部署到服务器（已禁用自动触发）

on:
  workflow_dispatch: # 只允许手动触发
  # push:
  #   branches: [main]  # 已禁用自动触发，避免与simple-deploy冲突

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 安装依赖
        run: |
          echo "📦 安装项目依赖..."
          npm ci --prefer-offline --no-audit --silent

      - name: 确保COS SDK依赖
        run: |
          echo "🔧 检查COS SDK..."
          chmod +x scripts/ensure-dependencies.cjs
          node scripts/ensure-dependencies.cjs

      - name: 构建项目
        env:
          PUBLIC_CDN_URL: https://cdn.dongboge.cn
          SITE_URL: https://dongboge.cn
          PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}
          NODE_ENV: production
        run: |
          echo "🏗️ 构建项目..."
          npm run build

      - name: 验证构建输出
        run: |
          echo "🔍 验证构建输出..."
          echo "=== 构建目录结构 ==="
          ls -la dist/
          echo ""
          echo "=== 客户端文件 ==="
          ls -la dist/client/ | head -10
          echo ""
          echo "=== 服务端文件 ==="
          ls -la dist/server/ | head -10
          echo ""
          echo "=== 检查关键文件 ==="
          echo "package.json: $([ -f package.json ] && echo '✅ 存在' || echo '❌ 缺失')"
          echo "server/entry.mjs: $([ -f dist/server/entry.mjs ] && echo '✅ 存在' || echo '❌ 缺失')"

      - name: 准备部署文件
        run: |
          echo "📋 准备部署文件..."
          # 创建部署目录
          mkdir -p deploy-package

          # 复制构建输出
          cp -r dist/* deploy-package/

          # 复制项目配置文件
          cp package.json deploy-package/
          cp package-lock.json deploy-package/ || echo "⚠️ package-lock.json 不存在"

          # 复制部署脚本
          cp -r deploy deploy-package/

          # 复制scripts目录（包含依赖检查和其他工具脚本）
          cp -r scripts deploy-package/

          echo "=== 部署包内容 ==="
          ls -la deploy-package/
          echo ""
          echo "=== scripts目录内容 ==="
          ls -la deploy-package/scripts/ | head -10

      - name: 上传静态资源到CDN
        timeout-minutes: 8
        run: |
          echo "☁️ 上传静态资源到CDN..."
          export TENCENT_SECRET_ID=${{ secrets.TENCENT_SECRET_ID }}
          export TENCENT_SECRET_KEY=${{ secrets.TENCENT_SECRET_KEY }}
          export TENCENT_COS_BUCKET=${{ secrets.TENCENT_COS_BUCKET }}
          export TENCENT_COS_REGION=ap-guangzhou
          export CDN_DOMAIN=$(echo ${{ secrets.CDN_DOMAIN }} | sed 's|^https://||' | sed 's|^http://||')

          # 使用优化上传策略（包含兼容性映射-›）
          chmod +x scripts/optimized-cos-upload.cjs
          echo "🚀 使用优化上传策略..."
          node scripts/optimized-cos-upload.cjs

      - name: 部署完整项目到服务器
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -rltz --delete
          path: deploy-package/
          remote_path: /var/www/dongboge
          remote_host: ${{ secrets.HOST }}
          remote_user: ${{ secrets.USERNAME }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
          remote_key_pass: ${{ secrets.SSH_PASSPHRASE }}

      - name: 服务器端配置和启动
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.PORT || '22' }}
          command_timeout: 10m
          script: |
            set -e
            cd /var/www/dongboge

            echo "📦 开始部署..."
            echo "=== 当前目录内容 ==="
            ls -la
            echo ""
            echo "=== 检查关键文件 ==="
            echo "package.json: $([ -f package.json ] && echo '✅ 存在' || echo '❌ 缺失')"
            echo "server/entry.mjs: $([ -f server/entry.mjs ] && echo '✅ 存在' || echo '❌ 缺失')"
            echo "client目录: $([ -d client ] && echo '✅ 存在' || echo '❌ 缺失')"

            if [ ! -f server/entry.mjs ]; then
              echo "❌ 关键文件缺失: server/entry.mjs，无法测试服务启动"
              exit 1
            fi

            # 运行文件修复脚本（如果需要）
            if [ -f "deploy/fix-missing-files.sh" ]; then
              echo "🔧 运行文件修复脚本..."
              chmod +x deploy/fix-missing-files.sh
              ./deploy/fix-missing-files.sh
            fi

            # 安装Node.js依赖
            echo "📦 安装生产依赖..."
            if [ -f "package.json" ]; then
              npm install --production --silent >/dev/null 2>&1
              echo "✅ 依赖安装完成"
            else
              echo "❌ package.json不存在，无法安装依赖"
              exit 1
            fi

            # 确保.env文件存在
            if [ ! -f ".env" ]; then
              echo "📝 创建.env文件..."
              cat > .env << EOF
            PUBLIC_SUPABASE_URL=${{ secrets.PUBLIC_SUPABASE_URL }}
            PUBLIC_SUPABASE_ANON_KEY=${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}
            PUBLIC_CDN_URL=https://cdn.dongboge.cn
            SITE_URL=https://dongboge.cn
            NODE_ENV=production
            HOST=127.0.0.1
            PORT=3000
            EOF
              echo "✅ .env文件已创建"
            fi

            # 使用专门的启动脚本启动服务
            echo "🚀 启动PM2服务..."
            if [ -f "deploy/start-service-with-pm2.sh" ]; then
              chmod +x deploy/start-service-with-pm2.sh
              ./deploy/start-service-with-pm2.sh
              echo "✅ 服务启动成功！"
            else
              echo "❌ 启动脚本不存在: deploy/start-service-with-pm2.sh"
              exit 1
            fi

            # 设置错误页面
            echo "📄 设置错误页面..."
            if [ -f "deploy/setup-error-pages.sh" ]; then
              chmod +x deploy/setup-error-pages.sh
              ./deploy/setup-error-pages.sh
            else
              echo "⚠️ 错误页面设置脚本不存在，跳过设置"
            fi

            # 更新Nginx配置
            echo "🔧 更新Nginx配置..."
            if [ -f "deploy/deploy-nginx-config.sh" ]; then
              chmod +x deploy/deploy-nginx-config.sh
              echo "📋 执行Nginx配置更新脚本..."
              if ./deploy/deploy-nginx-config.sh; then
                # 重载Nginx
                echo "🔄 重载Nginx..."
                if sudo systemctl reload nginx; then
                  echo "✅ Nginx配置更新完成"
                  
                  # 验证配置是否正确
                  echo "🔍 验证Nginx配置..."
                  ROOT_DIR=$(grep -E "^\s*root\s+" /etc/nginx/sites-available/dongboge.conf | head -1 | awk '{print $2}' | sed 's/;//')
                  echo "📁 当前Nginx根目录: $ROOT_DIR"
                  
                  if [ "$ROOT_DIR" = "/var/www/dongboge/client" ]; then
                    echo "✅ Nginx根目录配置正确"
                  else
                    echo "⚠️ Nginx根目录配置可能不正确"
                  fi
                else
                  echo "❌ Nginx重载失败"
                  exit 1
                fi
              else
                echo "❌ Nginx配置更新失败"
                exit 1
              fi
            else
              echo "⚠️ Nginx配置脚本不存在，跳过配置更新"
            fi

            echo ""
            echo "📊 测试结果总结:"
            echo "Node.js进程: $(ps aux | grep 'node.*server/entry.mjs' | grep -v grep | wc -l) 个"
            echo "端口3000监听: $(netstat -tlnp 2>/dev/null | grep :3000 | wc -l) 个"

            # 测试本地响应
            LOCAL_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:3000/ 2>/dev/null || echo "ERROR")
            echo "本地响应: $LOCAL_RESPONSE"
